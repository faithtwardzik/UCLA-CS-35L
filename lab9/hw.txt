Hw9 Log

I used the command:
gpg2 --gen-key 

It outputted the following:
gpg: keyring `/u/eng/class/classtwa/.gnupg/secring.gpg' created
Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
Your selection? 1

I selected the default, after which it outputted:
What keysize do you want? (2048)
Requested keysize is 2048 bits

I selected the default again, after which:
Please specify how long the key should be valid.
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years
      Key is valid for? (0)

I selected the default, followed by 'y' and Enter. 

After this, it prompted me for a name, email address, and comment, into 
which I put my full name, email address, and an arbitrary comment. I then
entered 'O' for Okay.

After this, it prompted me for a passphrase, into which I entered a five-digit
passphrase that I won't repeat in this CS35L hw log for security purposes.

I used the command gpg2 --list-keys to list my keys, which outputted:
/u/eng/class/classtwa/.gnupg/pubring.gpg
----------------------------------------
pub   2048R/3C88E453 2020-03-11
uid                  Faith Twardzik (35L) <FastFaith@comcast.net>
sub   2048R/55679E0E 2020-03-11

Then I exported the public key into hw-pubkey.asc by using the command:
gpg2 --armor --export FastFaith@comcast.net > ~/Desktop/35L/lab9/hw-pubkey.asc

Then, I signed all of my files using the commands:
gpg2 --output hw.sig --detach-sig hw.txt

After which it prompted me:
You need a passphrase to unlock the secret key for
user: "Faith Twardzik (35L) <FastFaith@comcast.net>"

Into which I typed the passphrase I just created. It created the document
with the detached signature. I then did this for the remaining two files using
the same type of commands. These did not require a passphrase, most likely
because I already entered it once.

gpg2 --output log.sig --detach-sig log.txt
gpg2 --output hw-pubkey.sig --detach-sig hw-pubkey.asc

Then, I verified all of the signatures:
gpg2 --verify log.sig log.txt
gpg2 --verify hw.sig hw.txt
gpg2 --verify hw-pubkey.sig hw-pubkey.

Every time, it outputted something to the effect of:
gpg: Signature made Tue 10 Mar 2020 06:31:21 PM PDT using RSA key ID 3C88E453
gpg: Good signature from "Faith Twardzik (35L) <FastFaith@comcast.net>"

That's it!

Questions:
1) For the first scenario, the resulting network is secure, because the 
generation of the key-pair using gpg2 generated the private and public key in 
a .gnupg directory file, the contents of which would not be accessible to this
team of hackers. Looking at the next scenario, if the team had tapped my
keyboard to obtain keystrokes, the network would still be secure, for much the
same reason. Because these keys were generated by the gpg2 commands and 
inputted into files, there is no need for me to parrot the keys and type them
in anywhere. Therefore, obtaining my keystrokes would be useless. The only
thing the hackers could get from it would be my passphrase, but this without
the key is useless. Looking at the third scenario, the resulting network would
NOT be secure. If they had physical control of the USB, then they could 
potentially access these files where the keys are located, meaning they would
most certainly be compromised. As for possible weaknesses, if the key, in the
process of being exported to the hw-pubkey.asc for turn-in was not exported
using the command 'export' or something similar, but instead copied and pasted,
it's possible this could have compromised the entire key that was copied by 
hand.

2) gpg2 --verify tells whether or not the file is verified by a detached 
signature, but it cannot tell whether or not you personally created the file,
because it only takes in the file in question and the signature file that was
created during the process of using gpg to generate a detached signature. 
It's entirely possible that someone else with access to the passphrase used 
could have generated these files, as well as it's entirely possible that these
files (and the signature file specifically) were created by someone else,
forwarded to you, and then, because they were signed beforehand by a different
user and now have a valid detached signature, will show up as verified when
you run the --verify command, just because there is a signature file (that 
not necessarily you created). 
