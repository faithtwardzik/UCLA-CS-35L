Assignment 1: Getting to Know Your System
Grade Received: 98/100
If you found this file helpful, please consider reaching out to me:
  Website: faithtwardzik.com
  Insta: @faithtwardzik

NOTES: 
RET = enter keystroke
RT-ARROW = right arrow
DEL = delete
BKSPC = backspace
SPC = space
Also, I added the opening command (ex. emacs exer1.html) because in later hw questions there are several files, and I wanted to be clear.

1.1
1. e m a c s SPC e x e r 1 . h t m l RET
2. C-s H T M L
3. RT-ARROW C-s s c a v M-b
4. C-s s e l f - M-b
5. C-s a r r o w M-b
6. C-e
7. C-a
8-9. (I used emacs commands the first time around, so I didn't need to repeat anything).
10. C-x C-c y

1.2 
1. e m a c s SPC e x e r 2 . h t m l
2. C-s < ! - C-a C-k 
3. C-s D E L C-a C-k 
4. C-s < ! C-a C-k C-n C-k C-n C-k 
5. C-s < ! M-b M-f C-u 7 C-d C-n C-a C-k C-n C-k C-n C-k C-n C-k C-s < ! C-a C-k
C-x C-s C-x C-c

1.3 
1. e m a c s SPC e x e r 3 . h t m l
2. M-% A s s i g n m e n t SPC 1 RET A s s i g n m e n t SPC 4 2 RET y . 
3. M-< M-% U T F - 8 RET U S - A S C I I RET .
4. M-< C-M-s [ ^ [ : a s c i i : ] ] C-a C-k C-M-s [ ^ [ : a s c i i : ] ]
5. M-< C-s < / o l C-e RET
6. C-x C-s C-x C-c

1.4
1. cat exer2.html exer2.diff >exer4.html
2. emacs exer4.html
3. M-> C-p C-p C-f C-k C-y M-< C-u 455 C-n C-y
4. M-> C-u 19 C-p M-f M-f M-f M-f C-SPC C-u 7 C-f C-w C-y C-n C-a C-f C-SPC C-n C-n C-n C-e C-w C-y M-{ M-{ M-{ M-{ C-SPC C-n C-n C-n C-w C-y M-{ M-{ M-{ M-{ C-f C-k C-y M-{ M-{ M-{ M-{ M-{ C-f C-k C-y M-< C-u 16 C-n C-n C-n C-y M-< C-u 128 C-n C-n C-n C-n C-y M-y M-< C-u 384 C-n C-n C-n C-n C-y M-y DEL DEL DEL C-p DEL C-p DEL C-p DEL M-< C-u 430 C-n C-n C-n C-n C-n M-f M-f M-f M-f C-y M-y M-y C-n C-y M-y M-y M-y M-y M-y C-n DEL DEL DEL C-p DEL C-p DEL C-p DEL
5. M-> C-u 15 M-{ C-n C-SPC C-u 15 M-} BKSPC
6. C-_
7. M-> C-p RT-ARROW SPC - - > C-u 15 M-{ C-n < ! - - SPC M-} M-} M-} C-p < ! - - SPC M-} M-} M-} M-} M-} C-p < ! - - SPC M-} M-} M-} M-} C-p C-p C-p < ! - - SPC M-} M-} M-} M-f M-f M-f M-f M-f C-b C-b C-b C-b < ! - - SPC C-n C-n C-n C-n C-n C-a < ! - - SPC M-} M-} M-} C-p < ! - - SPC 
8. M-< M-% < o l > RET < o L > RET ! (this replaced 7 occurrences)
9. C-x C-s C-c C-x diff -u exer1.html exer4.html >exer4.diff

1.5 e m a c s
1. M-! m k d i r SPC ~ / j u n k 
2. M-! t o u c h SPC ~ / j u n k / h e l l o . c RET C-x C-f ~ / j u n k / h e l l o . c (then, I typed in the program specified in the assignment)
3. M-x c o m p i l e RET h e l l o RET
4. M-! . / h e l l o RET C-x b h e l l o - o u t RET E O F SPC o n SPC i n p u t
5. C-a C-k C-y C-x b k e y 1 . t x t RET C-y
EOF on input (this was yanked from the hello-out buffer using C-y)

1.6
1. e m a c s C-x b * s c r a t c h * RET
2. m o s t - n e g a t i v e - f i x n u m C-j (this returns: -2305843009213693952)
m o s t - p o s i t i v e - f i x n u m C-j (this returns: 2305843009213693951)
( f o r m a t SPC " % x " SPC 2 3 0 5 8 4 3 0 0 9 2 1 3 6 9 3 9 5 1 ) C-j (this returns: "1fffffffffffffff")
( f o r m a t SPC " % x " SPC - 2 3 0 5 8 4 3 0 0 9 2 1 3 6 9 3 9 5 2 ) C-j (this returns: "2000000000000000")

most-positive-fixnum is 2^61. Although the highest number could realistically be higher, since this is a 64-bit system, we see from the hex representation that the first few bits are probably reserved as some sort of tag, so the highest possible positive number is 2^61 to account for these lost bits. This is similar with most-negative-fixnum, which is one less than -(2^61).
3. ( r a n d o m SPC " 1 0 5 - 0 8 3 - 0 3 7 " ) C-j (this returns: -415164257009954532)
4. ( s e t q SPC x SPC ( r a n d o m ) ) C-j (this returns: -1485969935382177403)
( s e t q SPC y SPC ( r a n d o m ) ) C-j (this returns: -1886897914583837375)
5. ( * SPC x SPC y ) C-j (this returns a p value of: -1667113135134809147, with the negative probably due to overflow)
( l o g i o r SPC - 1 6 6 7 1 1 3 1 3 5 1 3 4 8 0 9 1 4 7 SPC m o s t - n e g a t i v e - f i x n u m ) C-j (this returns an r value of: -1667113135134809147, which is the same value as p)
6. r and p are not mathematically correct, so I didn't need to try again.
7. We know that the random function will never return a truly random number, regardless of whether it is in Lisp or C++, through emacs or not. The algorithms for computing the random numbers may be different, but they will never be truly random. I think the rand() function used the current time to seed the function, so if it was run repeatedly very rapidly, it would return the same number. Additionally, since we used logior(), which is a bitwise inclusive OR and it returned the same number, it cannot be random. 
8. Essentially, we are calculating the probability that the random function will produce two integers that, when multiplied, will overflow. We can use the concept of mathematical bounds to do this. If we were working with 64 bits (which we are not, because the random function does not output numbers up to 2^64, but rather 2^61), then we could calculate the bound as follows: (2^64 - 2^32) / 2^64, because we are searching out numbers above 2^32 to cause overflow when multiplied. The answer is 1. If we replace the 2^64 with 2^61 as is the case with the random function's range of numbers, we would get (2^61 - 2^29) / 2^61, where this also returns 1. This is for one number, but since the bound will also be 1 for the second number, it is 1 overall. So, this lower bound ends up being 1.However, we are looking for the probability that the two numbers will not overfow, so if we were looking for the probability that x is greater than 2^29 and y is greater than 2^29 ( or P(x > 2^29) * P(y > 2^29)) then we can use a sum to get the probability that there won't be overflow, and that sum ends up being the combination of all numbers that will not multiply to over 2^61, as shown below:

the sum from i = 0 to i = 29 of: 2^n * 2^(29-n) / 2^(61-1)

When we evaluate this sum, we get the answer to be 0. 
